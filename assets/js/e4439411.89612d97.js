"use strict";(self.webpackChunknodearch_io=self.webpackChunknodearch_io||[]).push([[7902],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(a),d=n,k=u["".concat(l,".").concat(d)]||u[d]||m[d]||s;return a?r.createElement(k,i(i({ref:t},p),{},{components:a})):r.createElement(k,i({ref:t},p))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[u]="string"==typeof e?e:n,i[1]=o;for(var c=2;c<s;c++)i[c]=a[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},7130:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const s={},i="Testing",o={unversionedId:"guides/testing",id:"guides/testing",title:"Testing",description:"Table of Contents",source:"@site/docs/guides/testing.md",sourceDirName:"guides",slug:"/guides/testing",permalink:"/docs/guides/testing",draft:!1,editUrl:"https://github.com/nodearch/nodearch.io/edit/main/docs/guides/testing.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Express APP",permalink:"/docs/guides/express"},next:{title:"Official Extensions",permalink:"/docs/category/official-extensions"}},l={},c=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Setup",id:"setup",level:2},{value:"Basic Test Case Structure",id:"basic-test-case-structure",level:2},{value:"Decorators",id:"decorators",level:2},{value:"@Test",id:"test",level:3},{value:"@BeforeEach",id:"beforeeach",level:3},{value:"@Case",id:"case",level:3},{value:"Usage",id:"usage",level:4},{value:"Arguments",id:"arguments",level:4},{value:"@Mock",id:"mock",level:3},{value:"@Override",id:"override",level:3},{value:"Writing Test Cases",id:"writing-test-cases",level:2},{value:"Example: User Service Tests",id:"example-user-service-tests",level:3},{value:"Mocking Dependencies",id:"mocking-dependencies",level:2},{value:"Example: Mocking User Repository",id:"example-mocking-user-repository",level:3},{value:"user-repo-mock",id:"user-repo-mock",level:3}],p={toc:c},u="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(u,(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"testing"},"Testing"),(0,n.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#setup"},"Setup")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#basic-test-case-structure"},"Basic Test Case Structure")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#decorators"},"Decorators"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#test"},"@Test")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#beforeeach"},"@BeforeEach")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#case"},"@Case"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#usage"},"Usage")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#arguments"},"Arguments")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#mock"},"@Mock")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#override"},"@Override")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#writing-test-cases"},"Writing Test Cases"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#example-user-service-tests"},"Example: User Service Tests")))),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#mocking-dependencies"},"Mocking Dependencies"),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#example-mocking-user-repository"},"Example: Mocking User Repository")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#user-repo-mock"},"user-repo.mock.js"))))),(0,n.kt)("h2",{id:"introduction"},"Introduction"),(0,n.kt)("p",null,"NodeArch provides a robust framework for writing and running test cases. Using decorators like ",(0,n.kt)("inlineCode",{parentName:"p"},"@Test"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"@BeforeEach"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"@Case"),", you can structure your tests in a clear and maintainable manner."),(0,n.kt)("h2",{id:"setup"},"Setup"),(0,n.kt)("p",null,"Before writing your test cases, ensure you have NodeArch and the necessary dependencies installed."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @nodearch/mocha chai\n")),(0,n.kt)("p",null,"Import the required modules in your test files:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BeforeEach, Case, Test } from '@nodearch/mocha';\nimport { expect } from 'chai';\n")),(0,n.kt)("h2",{id:"basic-test-case-structure"},"Basic Test Case Structure"),(0,n.kt)("p",null,"A typical test case in NodeArch involves creating a test class and using decorators to define test methods."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Test()\nexport class MyTest {\n  constructor(private myService: MyService) {}\n\n  @BeforeEach()\n  setup() {\n    // Setup code here\n  }\n\n  @Case()\n  async myTestCase() {\n    // Test case code here\n    expect(true).to.be.true;\n  }\n}\n\n")),(0,n.kt)("h2",{id:"decorators"},"Decorators"),(0,n.kt)("h3",{id:"test"},"@Test"),(0,n.kt)("p",null,"The @Test decorator marks a class as a test suite. This class can contain multiple test cases."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Test()\nexport class MyTest { ... }\n")),(0,n.kt)("h3",{id:"beforeeach"},"@BeforeEach"),(0,n.kt)("p",null,"The @BeforeEach decorator marks a method to be executed before each test case in the class. It is typically used to set up preconditions."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@BeforeEach()\nsetup() {\n  // Code to run before each test\n}\n")),(0,n.kt)("h3",{id:"case"},"@Case"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"@Case")," decorator marks a method as a test case. It can be used in several ways to customize the test case, including setting a title and providing parameters."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Case()\nasync myTestCase() {\n  // Test case code\n}\n")),(0,n.kt)("h4",{id:"usage"},"Usage"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"@Case")," decorator can be used in the following ways:"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Without Parameters"),": Marks a method as a test case with the method name as the title."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Case()\nasync myTestCase() {\n  // Test case code\n}\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"With Title"),": Marks a method as a test case with a custom title."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Case('Custom Test Case Title')\nasync myTestCase() {\n  // Test case code\n}\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"With Options"),": Marks a method as a test case with options including title, active state, and parameters."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Case({ title: 'Custom Test Case Title', active: true, params: { id: 1 } })\nasync myTestCase() {\n  // Test case code\n}\n"))),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"With Title and Options"),": Marks a method as a test case with a custom title and additional options."),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Case('Custom Test Case Title', { active: true, params: { id: 1 } })\nasync myTestCase() {\n  // Test case code\n}\n")))),(0,n.kt)("h4",{id:"arguments"},"Arguments"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"title: string (optional) - The title of the test case."),(0,n.kt)("li",{parentName:"ul"},"options: ITestCaseOptions (optional) - Additional options for the test case.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-typescript"},"export interface ITestCaseOptions {\n  title?: string;\n  active?: boolean;\n  params?: object;\n}\n")),(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},"title: string (optional) - The title of the test case."),(0,n.kt)("li",{parentName:"ul"},"active: boolean (optional) - Indicates whether the test case is active. Defaults to true."),(0,n.kt)("li",{parentName:"ul"},"params: object (optional) - Parameters to pass to the test case.")))),(0,n.kt)("h3",{id:"mock"},"@Mock"),(0,n.kt)("p",null,"The @Mock decorator is used to mock a class or a service. This is useful for isolating the unit under test."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Mock(SampleComponent)\nexport class SampleMock { ... }\n")),(0,n.kt)("h3",{id:"override"},"@Override"),(0,n.kt)("p",null,"The @Override decorator is used to replace the real implementation of a dependency with a mock implementation in the test class."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"@Override(SampleMock)\nexport class SampleTest { ... }\n")),(0,n.kt)("h2",{id:"writing-test-cases"},"Writing Test Cases"),(0,n.kt)("h3",{id:"example-user-service-tests"},"Example: User Service Tests"),(0,n.kt)("p",null,"Below is an example of writing test cases for a UserService class. This example includes tests for fetching users, adding a user, and getting a user by ID."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BeforeEach, Case, Test } from '@nodearch/mocha';\nimport { UserService } from './user.service.js';\nimport { expect } from 'chai';\nimport { IUser } from './user.interface.js';\nimport { UserRepository } from './user.repository.js';\n\n@Test()\nexport class UserTest {\n  constructor(\n    private userService: UserService,\n    private userRepository: UserRepository\n  ) {}\n\n  @BeforeEach()\n  cleanupData() {\n    this.userRepository.removeAll();\n    this.userRepository.addUser({\n      id: 1,\n      name: 'John Doe',\n      email: 'john.d@email.com',\n      age: 20,\n      role: 'admin',\n      language: 'en'\n    });\n  }\n\n  @Case()\n  async getUsers() {\n    const users = await this.userService.getUsers();\n    expect(users).length(1);\n    expect(users[0].name).to.be.equal('John Doe');\n  }\n\n  @Case()\n  async addUser() {\n    const data: Omit<IUser, \"id\"> = {\n      name: 'Jane Doe',\n      email: 'jane.d@email.com',\n      age: 20,\n      role: 'admin',\n      language: 'fr'\n    };\n\n    await this.userService.addUser(data);\n    expect(await this.userRepository.getUsersCount()).to.be.equal(2);\n  }\n\n  @Case('Get User by existing Id', {params: { id: 1 }})\n  @Case('Get User by non-existing Id', {params: { id: 2 }})\n  async getUserById({ id }: { id: number }) {\n    const user = await this.userService.getUserById(id);\n    if (id === 1) {\n      expect(user.name).to.be.equal('John Doe');\n    } else if (id === 2) {\n      expect(user).to.be.undefined;\n    }\n  }\n}\n")),(0,n.kt)("h2",{id:"mocking-dependencies"},"Mocking Dependencies"),(0,n.kt)("p",null,"In some cases, you might need to mock dependencies to isolate the unit being tested. NodeArch allows you to override dependencies using the @Override decorator."),(0,n.kt)("h3",{id:"example-mocking-user-repository"},"Example: Mocking User Repository"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Case, Override, Test } from '@nodearch/mocha';\nimport { UserService } from './user.service.js';\nimport { expect } from 'chai';\nimport { UserRepoMock } from './user-repo.mock.js';\n\n@Test()\n@Override(UserRepoMock)\nexport class UserTest {\n  constructor(\n    private userService: UserService,\n  ) {}\n\n  @Case()\n  async getUsers() {\n    const users = await this.userService.getUsers();\n    expect(users).length(1);\n    expect(users[0].name).to.be.equal('Mocked User'); // The value is from UserRepoMock\n  }\n}\n")),(0,n.kt)("h3",{id:"user-repo-mock"},"user-repo-mock"),(0,n.kt)("p",null,"Below is the implementation of the mock user repository:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Mock } from '@nodearch/mocha';\nimport { UserRepository } from './user.repository.js';\n\n@Mock(UserRepository)\nexport class UserRepoMock {\n  async getUsers() {\n    return [\n      {\n        id: 1000,\n        name: 'Mocked User',\n        email: 'mocked.user@email.com',\n        age: 1,\n        role: 'admin',\n        language: 'en'\n      },\n    ];\n  }\n}\n")))}m.isMDXComponent=!0}}]);