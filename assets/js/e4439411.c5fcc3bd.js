"use strict";(self.webpackChunknodearch_io=self.webpackChunknodearch_io||[]).push([[7902],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>k});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=a,k=u["".concat(c,".").concat(d)]||u[d]||m[d]||s;return r?n.createElement(k,o(o({ref:t},p),{},{components:r})):n.createElement(k,o({ref:t},p))}));function k(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=r.length,o=new Array(s);o[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7130:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const s={},o="Testing",i={unversionedId:"guides/testing",id:"guides/testing",title:"Testing",description:"Table of Contents",source:"@site/docs/guides/testing.md",sourceDirName:"guides",slug:"/guides/testing",permalink:"/docs/guides/testing",draft:!1,editUrl:"https://github.com/nodearch/nodearch.io/edit/main/docs/guides/testing.md",tags:[],version:"current",frontMatter:{},sidebar:"docsSidebar",previous:{title:"Express APP",permalink:"/docs/guides/express"},next:{title:"Official Extensions",permalink:"/docs/category/official-extensions"}},c={},l=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Setup",id:"setup",level:2},{value:"Basic Test Case Structure",id:"basic-test-case-structure",level:2},{value:"Decorators",id:"decorators",level:2},{value:"@Test",id:"test",level:3},{value:"@BeforeEach",id:"beforeeach",level:3},{value:"@Case",id:"case",level:3},{value:"@Mock",id:"mock",level:3},{value:"@Override",id:"override",level:3},{value:"Writing Test Cases",id:"writing-test-cases",level:2},{value:"Example: User Service Tests",id:"example-user-service-tests",level:3},{value:"Mocking Dependencies",id:"mocking-dependencies",level:2},{value:"Example: Mocking User Repository",id:"example-mocking-user-repository",level:3},{value:"user-repo-mock",id:"user-repo-mock",level:3}],p={toc:l},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"testing"},"Testing"),(0,a.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#introduction"},"Introduction")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#setup"},"Setup")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#basic-test-case-structure"},"Basic Test Case Structure")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#decorators"},"Decorators"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#test"},"@Test")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#beforeeach"},"@BeforeEach")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#case"},"@Case")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#mock"},"@Mock")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#override"},"@Override")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#writing-test-cases"},"Writing Test Cases"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#example-user-service-tests"},"Example: User Service Tests")))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#mocking-dependencies"},"Mocking Dependencies"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#example-mocking-user-repository"},"Example: Mocking User Repository")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#user-repo-mock"},"user-repo.mock.js"))))),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"NodeArch provides a robust framework for writing and running test cases. Using decorators like ",(0,a.kt)("inlineCode",{parentName:"p"},"@Test"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"@BeforeEach"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"@Case"),", you can structure your tests in a clear and maintainable manner."),(0,a.kt)("h2",{id:"setup"},"Setup"),(0,a.kt)("p",null,"Before writing your test cases, ensure you have NodeArch and the necessary dependencies installed."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm install @nodearch/mocha chai\n")),(0,a.kt)("p",null,"Import the required modules in your test files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BeforeEach, Case, Test } from '@nodearch/mocha';\nimport { expect } from 'chai';\n")),(0,a.kt)("h2",{id:"basic-test-case-structure"},"Basic Test Case Structure"),(0,a.kt)("p",null,"A typical test case in NodeArch involves creating a test class and using decorators to define test methods."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@Test()\nexport class MyTest {\n  constructor(private myService: MyService) {}\n\n  @BeforeEach()\n  setup() {\n    // Setup code here\n  }\n\n  @Case()\n  async myTestCase() {\n    // Test case code here\n    expect(true).to.be.true;\n  }\n}\n\n")),(0,a.kt)("h2",{id:"decorators"},"Decorators"),(0,a.kt)("h3",{id:"test"},"@Test"),(0,a.kt)("p",null,"The @Test decorator marks a class as a test suite. This class can contain multiple test cases."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@Test()\nexport class MyTest { ... }\n")),(0,a.kt)("h3",{id:"beforeeach"},"@BeforeEach"),(0,a.kt)("p",null,"The @BeforeEach decorator marks a method to be executed before each test case in the class. It is typically used to set up preconditions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@BeforeEach()\nsetup() {\n  // Code to run before each test\n}\n")),(0,a.kt)("h3",{id:"case"},"@Case"),(0,a.kt)("p",null,"The @Case decorator marks a method as a test case. You can also pass parameters to customize the test case."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@Case()\nasync myTestCase() {\n  // Test case code\n}\n")),(0,a.kt)("h3",{id:"mock"},"@Mock"),(0,a.kt)("p",null,"The @Mock decorator is used to mock a class or a service. This is useful for isolating the unit under test."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@Mock(SampleComponent)\nexport class SampleMock { ... }\n")),(0,a.kt)("h3",{id:"override"},"@Override"),(0,a.kt)("p",null,"The @Override decorator is used to replace the real implementation of a dependency with a mock implementation in the test class."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"@Override(SampleMock)\nexport class SampleTest { ... }\n")),(0,a.kt)("h2",{id:"writing-test-cases"},"Writing Test Cases"),(0,a.kt)("h3",{id:"example-user-service-tests"},"Example: User Service Tests"),(0,a.kt)("p",null,"Below is an example of writing test cases for a UserService class. This example includes tests for fetching users, adding a user, and getting a user by ID."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { BeforeEach, Case, Test } from '@nodearch/mocha';\nimport { UserService } from './user.service.js';\nimport { expect } from 'chai';\nimport { IUser } from './user.interface.js';\nimport { UserRepository } from './user.repository.js';\n\n@Test()\nexport class UserTest {\n  constructor(\n    private userService: UserService,\n    private userRepository: UserRepository\n  ) {}\n\n  @BeforeEach()\n  cleanupData() {\n    this.userRepository.removeAll();\n    this.userRepository.addUser({\n      id: 1,\n      name: 'John Doe',\n      email: 'john.d@email.com',\n      age: 20,\n      role: 'admin',\n      language: 'en'\n    });\n  }\n\n  @Case()\n  async getUsers() {\n    const users = await this.userService.getUsers();\n    expect(users).length(1);\n    expect(users[0].name).to.be.equal('John Doe');\n  }\n\n  @Case()\n  async addUser() {\n    const data: Omit<IUser, \"id\"> = {\n      name: 'Jane Doe',\n      email: 'jane.d@email.com',\n      age: 20,\n      role: 'admin',\n      language: 'fr'\n    };\n\n    await this.userService.addUser(data);\n    expect(await this.userRepository.getUsersCount()).to.be.equal(2);\n  }\n\n  @Case('Get User by existing Id', {params: { id: 1 }})\n  @Case('Get User by non-existing Id', {params: { id: 2 }})\n  async getUserById({ id }: { id: number }) {\n    const user = await this.userService.getUserById(id);\n    if (id === 1) {\n      expect(user.name).to.be.equal('John Doe');\n    } else if (id === 2) {\n      expect(user).to.be.undefined;\n    }\n  }\n}\n")),(0,a.kt)("h2",{id:"mocking-dependencies"},"Mocking Dependencies"),(0,a.kt)("p",null,"In some cases, you might need to mock dependencies to isolate the unit being tested. NodeArch allows you to override dependencies using the @Override decorator."),(0,a.kt)("h3",{id:"example-mocking-user-repository"},"Example: Mocking User Repository"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Case, Override, Test } from '@nodearch/mocha';\nimport { UserService } from './user.service.js';\nimport { expect } from 'chai';\nimport { UserRepoMock } from './user-repo.mock.js';\n\n@Test()\n@Override(UserRepoMock)\nexport class UserTest {\n  constructor(\n    private userService: UserService,\n  ) {}\n\n  @Case()\n  async getUsers() {\n    const users = await this.userService.getUsers();\n    expect(users).length(1);\n    expect(users[0].name).to.be.equal('Mocked User'); // The value is from UserRepoMock\n  }\n}\n")),(0,a.kt)("h3",{id:"user-repo-mock"},"user-repo-mock"),(0,a.kt)("p",null,"Below is the implementation of the mock user repository:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import { Mock } from '@nodearch/mocha';\nimport { UserRepository } from './user.repository.js';\n\n@Mock(UserRepository)\nexport class UserRepoMock {\n  async getUsers() {\n    return [\n      {\n        id: 1000,\n        name: 'Mocked User',\n        email: 'mocked.user@email.com',\n        age: 1,\n        role: 'admin',\n        language: 'en'\n      },\n    ];\n  }\n}\n")))}m.isMDXComponent=!0}}]);